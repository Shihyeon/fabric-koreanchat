plugins {
    id 'net.neoforged.moddev' version '2.0.29-beta'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

modrinth {
    def minecraftVersionsString = project.findProperty('support_version') ?: ''
    def minecraftVersions = minecraftVersionsString.split(',')
    token = System.getenv("MODRINTH_TOKEN")
    changelog = rootProject.file("changelog.txt").text
    projectId = "qyulnpBL"
    versionNumber = "mc${project.minecraft_version}-${project.mod_version}"
    versionName = "Korean Chat Patch " + project.mod_version
    versionType = "release"
    uploadFile = build
    gameVersions = minecraftVersions.collect { it.trim() }
    loaders = ["fabric"]
    dependencies {
        required.project "fabric-api"
        optional.project "modmenu"
    }
}

base {
    archivesName = "${project.archives_base_name}-mc${project.minecraft_version}"
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
}

neoForge {
    version = project.neoforge_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // Validate AT files and raise errors when they have invalid targets
    // This option is false by default, but turning it on is recommended
    validateAccessTransformers = true

    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            client()
        }
        data {
            data()
        }
    }

    mods {
        testproject {
            sourceSet sourceSets.main
        }
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neoforge_version,
                             neo_version_range      : neo_version_range,
                             version                : mod_version,]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}