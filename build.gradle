plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

loom {
	accessWidenerPath = file("src/main/resources/koreanpatch.accesswinder")
}

version = project.mod_version
group = project.maven_group

modrinth {
	def minecraftVersionsString = project.findProperty('support_version') ?: ''
	def minecraftVersions = minecraftVersionsString.split(',')
	token = System.getenv("MODRINTH_TOKEN")
	changelog = rootProject.file("changelog.txt").text
	projectId = "qyulnpBL"
	versionNumber = "mc${project.minecraft_version}-${project.mod_version}"
	versionName = "Korean Chat Patch " + project.mod_version
	versionType = "release"
	uploadFile = remapJar
	gameVersions = minecraftVersions.collect { it.trim() }
	loaders = ["fabric"]
	dependencies {
		required.project "fabric-api"
		optional.project "modmenu"
	}
}


base {
	archivesName = "${project.archives_base_name}-mc${project.minecraft_version}"
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}

	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modCompileOnly "maven.modrinth:command-block-ide:${project.command_block_ide_version}"
	modImplementation "maven.modrinth:bettercommandblockui:${project.better_command_block_ui_version}"
}

processResources {
	def propertiesMap = [
            "version": project.version,
            "minecraft_version": project.properties["minecraft_version"],
            "loader_version": project.properties["loader_version"],
	]

	inputs.properties(propertiesMap)

	filesMatching("fabric.mod.json") {
		expand(propertiesMap)
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}